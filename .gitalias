[alias]
    # List commit history with a graph, showing date, hash, message, and author
    # Usage: git ls
    ls = "log --pretty=format:\"%C(auto)%ad %h%d %s %C(cyan)[%an]%C(reset)\" --graph --date=short"

    # Stage all changes and amend them to the previous commit without editing the message
    # Usage: git amend
    amend = !git add -A && git commit --amend --no-edit

    # Fetch all changes and rebase current branch on top of the default branch
    # Usage: git sync
    sync = !git fetch --all && git rebase $(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@')

    # Update repository by pulling changes, rebasing local commits, and updating submodules
    # Usage: git up
    up = !git pull --rebase --prune $@ && git submodule update --init --recursive

    # Undo the last commit while keeping its changes in the working directory
    # Usage: git undo
    undo = reset HEAD~1 --mixed

    # List all configured git aliases with their descriptions
    # Usage: git alias
    alias = "!git config --get-regexp ^alias\\. | sed -e 's/^alias\\.//' | \
            awk '{ printf \"%s%s%s = %s\\n\", \"\\033[33m\", $1, \"\\033[0m\", substr($0, index($0,$2)) }'"

    # Show commit statistics (number of commits, files changed) for a specific author
    # Usage: git authors
    authors = "!git shortlog -sn --no-merges | \
              awk '{printf \"%s%5d%s commits by %s%s%s\\n\", \
              \"\\033[33m\",$1,\"\\033[0m\",\"\\033[36m\",$2,\"\\033[0m\"}'"

    # Display detailed statistics for commits by a specific author
    # Usage: git stats "Author Name"
    stats = "!f() { \
        git log --author=\"$1\" --shortstat --no-merges | \
        grep -E 'fil(e|es) changed' | \
        awk '{ files += $1; inserted += $4; deleted += $6 } \
        END { \
            printf \"\\033[1mCommit Statistics:\\033[0m\\n\"; \
            printf \"Files changed: %s%d%s\\n\", \"\\033[33m\", files, \"\\033[0m\"; \
            printf \"Lines added:   %s%d%s\\n\", \"\\033[32m\", inserted, \"\\033[0m\"; \
            printf \"Lines deleted: %s%d%s\\n\", \"\\033[31m\", deleted, \"\\033[0m\"; \
            printf \"Total delta:   %s%+d%s\\n\", \"\\033[36m\", inserted - deleted, \"\\033[0m\"; \
            printf \"Add/Del ratio: %s1:%.2f%s\\n\", \"\\033[35m\", (inserted ? deleted/inserted : 0), \"\\033[0m\"; \
        }' \
    ; }; f"

    # Clean up repository by pruning remote branches, garbage collecting, and removing untracked files
    # Usage: git cleanup
    cleanup = !git remote prune origin && git gc && git clean -df

    # Search commit history for a specific string
    # Usage: git search "search string"
    search = "!f() { git log --pretty=format:'%C(yellow)%h %Cblue%ad %Cgreen%an%Cred%d %Creset%s' \
              --date=short -S\"$1\"; }; f"

    # Show recently modified branches with their last commit info
    # Usage: git recent
    recent = "!git for-each-ref --sort=-committerdate refs/heads/ \
             --format='%(color:yellow)%(refname:short)%(color:reset) - \
%(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - \
%(authorname) (%(color:green)%(committerdate:relative)%(color:reset))'"

    # Find the largest files in the repository
    # Usage: git big
    big = "!f() { git rev-list --objects --all | \
           git cat-file --batch-check='%(objecttype) %(objectname) %(objectsize) %(rest)' | \
           sed -n 's/^blob //p' | sort -k2nr | head -n 10 | cut -c 1-12,41- | \
           numfmt --field=2 --to=iec-i --suffix=B --padding=7 --round=nearest | \
           awk '{printf \"%s%s%s %s%s%s %s\\n\", \
           \"\\033[33m\", $1, \"\\033[0m\", \"\\033[36m\", $2, \"\\033[0m\", $3}'; }; f"

    # Show weekly commit stats
    # Usage: git weekly
    weekly = "!git log --author=\"$(git config user.name)\" --format='%ai' | \
             awk '{print substr($1,1,10)}' | sort -k1 | \
             uniq -c | awk '{printf \"%s%3d%s commits on %s%s%s\\n\", \
             \"\\033[32m\",$1,\"\\033[0m\",\"\\033[36m\",$2,\"\\033[0m\"}'"

    # Show commit activity by hour
    # Usage: git activity
    activity = "!f() { git log --format='%ai' | \
               awk '{print substr($2,1,2)}' | sort -n | uniq -c | \
               awk '{printf \"%s%02d:00%s %s%s%s %s\\n\", \
               \"\\033[36m\",$2,\"\\033[0m\",\"\\033[33m\",$1,\"\\033[0m\", \
               \"commits\"}'; }; f"

    # Show repository age and commit count
    # Usage: git age
    age = "!f() { \
        first=$(git log --reverse --format=%ai | head -1); \
        last=$(git log -1 --format=%ai); \
        commits=$(git rev-list --count HEAD); \
        echo -e \"\\033[1mRepository Statistics:\\033[0m\"; \
        echo -e \"First commit: \\033[36m$first\\033[0m\"; \
        echo -e \"Last commit:  \\033[36m$last\\033[0m\"; \
        echo -e \"Total commits: \\033[33m$commits\\033[0m\"; \
    }; f"

    # Show file type statistics
    # Usage: git filetypes
    filetypes = "!git ls-files | sed 's/.*\\.//' | sort | uniq -c | sort -rn | \
                awk '{printf \"%s%4d%s files with extension %s.%s%s\\n\", \
                \"\\033[33m\",$1,\"\\033[0m\",\"\\033[36m\",$2,\"\\033[0m\"}'"
                
    # Change author information for all commits made by a specific email address
    # Usage: git reauthor "old@email.com"
    reauthor = "!f() { \
        if [ -z \"$1\" ]; then \
            echo -e \"\\033[31mError: Email address required\\033[0m\"; \
            echo -e \"Usage: git reauthor \\\"old@email.com\\\"\"; \
            return 1; \
        fi; \
        echo -e \"\\033[33mWarning: This will rewrite history!\\033[0m\"; \
        echo -e \"All commits from \\033[36m$1\\033[0m will be attributed to:\"; \
        echo -e \"Name:  \\033[32m$(git config user.name)\\033[0m\"; \
        echo -e \"Email: \\033[32m$(git config user.email)\\033[0m\"; \
        read -p \"Continue? (y/n): \" confirm; \
        if [[ $confirm != [yY] && $confirm != [yY][eE][sS] ]]; then \
            echo -e \"\\033[33mOperation cancelled\\033[0m\"; \
            return 0; \
        fi; \
        git filter-branch --env-filter ' \
            if [ \"$GIT_COMMITTER_EMAIL\" = \"'$1'\" ]; then \
                export GIT_COMMITTER_NAME=\"$(git config user.name)\"; \
                export GIT_COMMITTER_EMAIL=\"$(git config user.email)\"; \
            fi; \
            if [ \"$GIT_AUTHOR_EMAIL\" = \"'$1'\" ]; then \
                export GIT_AUTHOR_NAME=\"$(git config user.name)\"; \
                export GIT_AUTHOR_EMAIL=\"$(git config user.email)\"; \
            fi; \
        ' --tag-name-filter cat -- --branches --tags; \
        echo -e \"\\n\\033[32mDone!\\033[0m Author information updated for email: \\033[36m$1\\033[0m\"; \
        echo -e \"\\033[33mNote:\\033[0m If you've already pushed these commits, you will need to force push.\"; \
    }; f"